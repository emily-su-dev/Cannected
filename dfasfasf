[1mdiff --git a/client/node_modules/@nodelib/fs.stat/out/managers/options.d.ts b/client/node_modules/@nodelib/fs.stat/out/managers/options.d.ts[m
[1mnew file mode 100644[m
[1mindex 00000000..6e2e9b0e[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/@nodelib/fs.stat/out/managers/options.d.ts[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32mimport { FileSystemAdapter } from '../adapters/fs';[m
[32m+[m[32mexport interface Options {[m
[32m+[m[32m    fs?: Partial<FileSystemAdapter>;[m
[32m+[m[32m    throwErrorOnBrokenSymlinks?: boolean;[m
[32m+[m[32m    followSymlinks?: boolean;[m
[32m+[m[32m}[m
[32m+[m[32mexport declare type StrictOptions = {[m
[32m+[m[32m    fs: FileSystemAdapter;[m
[32m+[m[32m} & Required<Options>;[m
[32m+[m[32mexport declare function prepare(opts?: Options): StrictOptions;[m
[32m+[m[32m//# sourceMappingURL=options.d.ts.map[m
\ No newline at end of file[m
[1mdiff --git a/client/node_modules/@nodelib/fs.stat/out/managers/options.js b/client/node_modules/@nodelib/fs.stat/out/managers/options.js[m
[1mnew file mode 100644[m
[1mindex 00000000..ae529226[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/@nodelib/fs.stat/out/managers/options.js[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32m"use strict";[m
[32m+[m[32mObject.defineProperty(exports, "__esModule", { value: true });[m
[32m+[m[32mconst fsAdapter = require("../adapters/fs");[m
[32m+[m[32mfunction prepare(opts) {[m
[32m+[m[32m    const options = Object.assign({[m
[32m+[m[32m        fs: fsAdapter.getFileSystemAdapter(opts ? opts.fs : undefined),[m
[32m+[m[32m        throwErrorOnBrokenSymlinks: true,[m
[32m+[m[32m        followSymlinks: true[m
[32m+[m[32m    }, opts);[m
[32m+[m[32m    return options;[m
[32m+[m[32m}[m
[32m+[m[32mexports.prepare = prepare;[m
[1mdiff --git a/client/node_modules/@nodelib/fs.stat/out/providers/stat.d.ts b/client/node_modules/@nodelib/fs.stat/out/providers/stat.d.ts[m
[1mnew file mode 100644[m
[1mindex 00000000..47c0bd1d[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/@nodelib/fs.stat/out/providers/stat.d.ts[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m/// <reference types="node" />[m
[32m+[m[32mimport * as fs from 'fs';[m
[32m+[m[32mimport { StrictOptions } from '../managers/options';[m
[32m+[m[32mexport declare function sync(path: fs.PathLike, options: StrictOptions): fs.Stats;[m
[32m+[m[32mexport declare type AsyncCallback = (err: NodeJS.ErrnoException | null, stats?: fs.Stats) => void;[m
[32m+[m[32mexport declare function async(path: fs.PathLike, options: StrictOptions, callback: AsyncCallback): void;[m
[32m+[m[32m/**[m
[32m+[m[32m * Returns `true` for followed symlink.[m
[32m+[m[32m */[m
[32m+[m[32mexport declare function isFollowedSymlink(stat: fs.Stats, options: StrictOptions): boolean;[m
[32m+[m[32m//# sourceMappingURL=stat.d.ts.map[m
\ No newline at end of file[m
[1mdiff --git a/client/node_modules/@nodelib/fs.stat/out/providers/stat.js b/client/node_modules/@nodelib/fs.stat/out/providers/stat.js[m
[1mnew file mode 100644[m
[1mindex 00000000..a7bbc526[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/@nodelib/fs.stat/out/providers/stat.js[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32m"use strict";[m
[32m+[m[32mObject.defineProperty(exports, "__esModule", { value: true });[m
[32m+[m[32mfunction sync(path, options) {[m
[32m+[m[32m    const lstat = options.fs.lstatSync(path);[m
[32m+[m[32m    if (!isFollowedSymlink(lstat, options)) {[m
[32m+[m[32m        return lstat;[m
[32m+[m[32m    }[m
[32m+[m[32m    try {[m
[32m+[m[32m        const stat = options.fs.statSync(path);[m
[32m+[m[32m        stat.isSymbolicLink = () => true;[m
[32m+[m[32m        return stat;[m
[32m+[m[32m    }[m
[32m+[m[32m    catch (err) {[m
[32m+[m[32m        if (!options.throwErrorOnBrokenSymlinks) {[m
[32m+[m[32m            return lstat;[m
[32m+[m[32m        }[m
[32m+[m[32m        throw err;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m[32mexports.sync = sync;[m
[32m+[m[32mfunction async(path, options, callback) {[m
[32m+[m[32m    options.fs.lstat(path, (err0, lstat) => {[m
[32m+[m[32m        if (err0) {[m
[32m+[m[32m            return callback(err0, undefined);[m
[32m+[m[32m        }[m
[32m+[m[32m        if (!isFollowedSymlink(lstat, options)) {[m
[32m+[m[32m            return callback(null, lstat);[m
[32m+[m[32m        }[m
[32m+[m[32m        options.fs.stat(path, (err1, stat) => {[m
[32m+[m[32m            if (err1) {[m
[32m+[m[32m                return options.throwErrorOnBrokenSymlinks ? callback(err1) : callback(null, lstat);[m
[32m+[m[32m            }[m
[32m+[m[32m            stat.isSymbolicLink = () => true;[m
[32m+[m[32m            callback(null, stat);[m
[32m+[m[32m        });[m
[32m+[m[32m    });[m
[32m+[m[32m}[m
[32m+[m[32mexports.async = async;[m
[32m+[m[32m/**[m
[32m+[m[32m * Returns `true` for followed symlink.[m
[32m+[m[32m */[m
[32m+[m[32mfunction isFollowedSymlink(stat, options) {[m
[32m+[m[32m    return stat.isSymbolicLink() && options.followSymlinks;[m
[32m+[m[32m}[m
[32m+[m[32mexports.isFollowedSymlink = isFollowedSymlink;[m
[1mdiff --git a/client/node_modules/fast-glob/out/adapters/fs-stream.d.ts b/client/node_modules/fast-glob/out/adapters/fs-stream.d.ts[m
[1mnew file mode 100644[m
[1mindex 00000000..bca4e9f4[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/fast-glob/out/adapters/fs-stream.d.ts[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m/// <reference types="node" />[m
[32m+[m[32mimport * as fs from 'fs';[m
[32m+[m[32mimport FileSystem from './fs';[m
[32m+[m[32mimport { FilterFunction } from '@mrmlnc/readdir-enhanced';[m
[32m+[m[32mimport { Entry } from '../types/entries';[m
[32m+[m[32mimport { Pattern } from '../types/patterns';[m
[32m+[m[32mexport default class FileSystemStream extends FileSystem<NodeJS.ReadableStream> {[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Use stream API to read entries for Task.[m
[32m+[m[32m     */[m
[32m+[m[32m    read(patterns: string[], filter: FilterFunction): NodeJS.ReadableStream;[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return entry for the provided path.[m
[32m+[m[32m     */[m
[32m+[m[32m    getEntry(filepath: string, pattern: Pattern): Promise<Entry | null>;[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return fs.Stats for the provided path.[m
[32m+[m[32m     */[m
[32m+[m[32m    getStat(filepath: string): Promise<fs.Stats>;[m
[32m+[m[32m}[m
[1mdiff --git a/client/node_modules/fast-glob/out/adapters/fs-stream.js b/client/node_modules/fast-glob/out/adapters/fs-stream.js[m
[1mnew file mode 100644[m
[1mindex 00000000..fcb236dd[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/fast-glob/out/adapters/fs-stream.js[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32m"use strict";[m
[32m+[m[32mvar __extends = (this && this.__extends) || (function () {[m
[32m+[m[32m    var extendStatics = function (d, b) {[m
[32m+[m[32m        extendStatics = Object.setPrototypeOf ||[m
[32m+[m[32m            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||[m
[32m+[m[32m            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };[m
[32m+[m[32m        return extendStatics(d, b);[m
[32m+[m[32m    };[m
[32m+[m[32m    return function (d, b) {[m
[32m+[m[32m        extendStatics(d, b);[m
[32m+[m[32m        function __() { this.constructor = d; }[m
[32m+[m[32m        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());[m
[32m+[m[32m    };[m
[32m+[m[32m})();[m
[32m+[m[32mObject.defineProperty(exports, "__esModule", { value: true });[m
[32m+[m[32mvar stream = require("stream");[m
[32m+[m[32mvar fsStat = require("@nodelib/fs.stat");[m
[32m+[m[32mvar fs_1 = require("./fs");[m
[32m+[m[32mvar FileSystemStream = /** @class */ (function (_super) {[m
[32m+[m[32m    __extends(FileSystemStream, _super);[m
[32m+[m[32m    function FileSystemStream() {[m
[32m+[m[32m        return _super !== null && _super.apply(this, arguments) || this;[m
[32m+[m[32m    }[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Use stream API to read entries for Task.[m
[32m+[m[32m     */[m
[32m+[m[32m    FileSystemStream.prototype.read = function (patterns, filter) {[m
[32m+[m[32m        var _this = this;[m
[32m+[m[32m        var filepaths = patterns.map(this.getFullEntryPath, this);[m
[32m+[m[32m        var transform = new stream.Transform({ objectMode: true });[m
[32m+[m[32m        transform._transform = function (index, _enc, done) {[m
[32m+[m[32m            return _this.getEntry(filepaths[index], patterns[index]).then(function (entry) {[m
[32m+[m[32m                if (entry !== null && filter(entry)) {[m
[32m+[m[32m                    transform.push(entry);[m
[32m+[m[32m                }[m
[32m+[m[32m                if (index === filepaths.length - 1) {[m
[32m+[m[32m                    transform.end();[m
[32m+[m[32m                }[m
[32m+[m[32m                done();[m
[32m+[m[32m            });[m
[32m+[m[32m        };[m
[32m+[m[32m        for (var i = 0; i < filepaths.length; i++) {[m
[32m+[m[32m            transform.write(i);[m
[32m+[m[32m        }[m
[32m+[m[32m        return transform;[m
[32m+[m[32m    };[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return entry for the provided path.[m
[32m+[m[32m     */[m
[32m+[m[32m    FileSystemStream.prototype.getEntry = function (filepath, pattern) {[m
[32m+[m[32m        var _this = this;[m
[32m+[m[32m        return this.getStat(filepath)[m
[32m+[m[32m            .then(function (stat) { return _this.makeEntry(stat, pattern); })[m
[32m+[m[32m            .catch(function () { return null; });[m
[32m+[m[32m    };[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return fs.Stats for the provided path.[m
[32m+[m[32m     */[m
[32m+[m[32m    FileSystemStream.prototype.getStat = function (filepath) {[m
[32m+[m[32m        return fsStat.stat(filepath, { throwErrorOnBrokenSymlinks: false });[m
[32m+[m[32m    };[m
[32m+[m[32m    return FileSystemStream;[m
[32m+[m[32m}(fs_1.default));[m
[32m+[m[32mexports.default = FileSystemStream;[m
[1mdiff --git a/client/node_modules/fast-glob/out/adapters/fs-sync.d.ts b/client/node_modules/fast-glob/out/adapters/fs-sync.d.ts[m
[1mnew file mode 100644[m
[1mindex 00000000..6fcc736b[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/fast-glob/out/adapters/fs-sync.d.ts[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m/// <reference types="node" />[m
[32m+[m[32mimport * as fs from 'fs';[m
[32m+[m[32mimport FileSystem from './fs';[m
[32m+[m[32mimport { FilterFunction } from '@mrmlnc/readdir-enhanced';[m
[32m+[m[32mimport { Entry } from '../types/entries';[m
[32m+[m[32mimport { Pattern } from '../types/patterns';[m
[32m+[m[32mexport default class FileSystemSync extends FileSystem<Entry[]> {[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Use sync API to read entries for Task.[m
[32m+[m[32m     */[m
[32m+[m[32m    read(patterns: string[], filter: FilterFunction): Entry[];[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return entry for the provided path.[m
[32m+[m[32m     */[m
[32m+[m[32m    getEntry(filepath: string, pattern: Pattern): Entry | null;[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return fs.Stats for the provided path.[m
[32m+[m[32m     */[m
[32m+[m[32m    getStat(filepath: string): fs.Stats;[m
[32m+[m[32m}[m
[1mdiff --git a/client/node_modules/fast-glob/out/adapters/fs-sync.js b/client/node_modules/fast-glob/out/adapters/fs-sync.js[m
[1mnew file mode 100644[m
[1mindex 00000000..41bcdef1[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/fast-glob/out/adapters/fs-sync.js[m
[36m@@ -0,0 +1,59 @@[m
[32m+[m[32m"use strict";[m
[32m+[m[32mvar __extends = (this && this.__extends) || (function () {[m
[32m+[m[32m    var extendStatics = function (d, b) {[m
[32m+[m[32m        extendStatics = Object.setPrototypeOf ||[m
[32m+[m[32m            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||[m
[32m+[m[32m            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };[m
[32m+[m[32m        return extendStatics(d, b);[m
[32m+[m[32m    };[m
[32m+[m[32m    return function (d, b) {[m
[32m+[m[32m        extendStatics(d, b);[m
[32m+[m[32m        function __() { this.constructor = d; }[m
[32m+[m[32m        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());[m
[32m+[m[32m    };[m
[32m+[m[32m})();[m
[32m+[m[32mObject.defineProperty(exports, "__esModule", { value: true });[m
[32m+[m[32mvar fsStat = require("@nodelib/fs.stat");[m
[32m+[m[32mvar fs_1 = require("./fs");[m
[32m+[m[32mvar FileSystemSync = /** @class */ (function (_super) {[m
[32m+[m[32m    __extends(FileSystemSync, _super);[m
[32m+[m[32m    function FileSystemSync() {[m
[32m+[m[32m        return _super !== null && _super.apply(this, arguments) || this;[m
[32m+[m[32m    }[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Use sync API to read entries for Task.[m
[32m+[m[32m     */[m
[32m+[m[32m    FileSystemSync.prototype.read = function (patterns, filter) {[m
[32m+[m[32m        var _this = this;[m
[32m+[m[32m        var entries = [];[m
[32m+[m[32m        patterns.forEach(function (pattern) {[m
[32m+[m[32m            var filepath = _this.getFullEntryPath(pattern);[m
[32m+[m[32m            var entry = _this.getEntry(filepath, pattern);[m
[32m+[m[32m            if (entry === null || !filter(entry)) {[m
[32m+[m[32m                return;[m
[32m+[m[32m            }[m
[32m+[m[32m            entries.push(entry);[m
[32m+[m[32m        });[m
[32m+[m[32m        return entries;[m
[32m+[m[32m    };[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return entry for the provided path.[m
[32m+[m[32m     */[m
[32m+[m[32m    FileSystemSync.prototype.getEntry = function (filepath, pattern) {[m
[32m+[m[32m        try {[m
[32m+[m[32m            var stat = this.getStat(filepath);[m
[32m+[m[32m            return this.makeEntry(stat, pattern);[m
[32m+[m[32m        }[m
[32m+[m[32m        catch (err) {[m
[32m+[m[32m            return null;[m
[32m+[m[32m        }[m
[32m+[m[32m    };[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return fs.Stats for the provided path.[m
[32m+[m[32m     */[m
[32m+[m[32m    FileSystemSync.prototype.getStat = function (filepath) {[m
[32m+[m[32m        return fsStat.statSync(filepath, { throwErrorOnBrokenSymlinks: false });[m
[32m+[m[32m    };[m
[32m+[m[32m    return FileSystemSync;[m
[32m+[m[32m}(fs_1.default));[m
[32m+[m[32mexports.default = FileSystemSync;[m
[1mdiff --git a/client/node_modules/fast-glob/out/adapters/fs.d.ts b/client/node_modules/fast-glob/out/adapters/fs.d.ts[m
[1mnew file mode 100644[m
[1mindex 00000000..abf44321[m
[1m--- /dev/null[m
[1m+++ b/client/node_modules/fast-glob/out/adapters/fs.d.ts[m
[36m@@ -0,0 +1,22 @@[m
[32m+[m[32m/// <reference types="node" />[m
[32m+[m[32mimport * as fs from 'fs';[m
[32m+[m[32mimport { FilterFunction } from '@mrmlnc/readdir-enhanced';[m
[32m+[m[32mimport { IOptions } from '../managers/options';[m
[32m+[m[32mimport { Entry } from '../types/entries';[m
[32m+[m[32mimport { Pattern } from '../types/patterns';[m
[32m+[m[32mexport default abstract class FileSystem<T> {[m
[32m+[m[32m    private readonly options;[m
[32m+[m[32m    constructor(options: IOptions);[m
[32m+[m[32m    /**[m
[32m+[m[32m     * The main logic of reading the entries that must be implemented by each adapter.[m
[32m+[m[32m     */[m
[32m+[m[32m    abstract read(filepaths: string[], filter: FilterFunction): T;[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Return full path to entry.[m
[32m+[m[32m     */[m
[32m+[m[32m    getFullEntryPath(fi